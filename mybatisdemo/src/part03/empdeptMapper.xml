<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">   
<mapper namespace="empdept">

<resultMap type="part03.dto.EmpDTO" id="empAll" autoMapping="false">
  <!-- select에 있는 테이블의 column명(column)   dto에 있는 멤버 변수명(property) -->
  <!-- 일반적으로 컬럼명과 멤버명이 같지만 이전에 개발로 인해 이미 있다면 resultMap을 사용해서 맞춰주는거 -->
  <!-- 테이블의 컬럼명과 DTO의 멤버변수가 다를 때는 resultMap을 이용해서 서로를 연결(join)해 준다. -->
 	<!-- <result column="employee_id" property="employee_id" />
	<result column="first_name" property="first_name" />
	<result column="job_id" property="job_id" />
	<result column="department_id" property="department_id" />  -->
	<constructor>
		<arg column="employee_id" javaType="java.lang.String"/>
		<arg column="first_name" javaType="java.lang.String"/>
		<arg column="job_id" javaType="java.lang.String"/>
		<arg column="department_id" javaType="java.lang.String"/>
	</constructor>
</resultMap>

	<!-- resultType, parameterType(type으로 끝나는것들)은 타입이 서로 일치할 때 사용.
		resultMap, parameterMap(map으로 끝나는것들)은 서로 타입이 일치하지 않을 때 임의로 변경하기 위해서 사용 -->
	<!-- 지금 타입이 일치(part03.dto.EmpDTO와 변수 일치)  하는데 다르다고 생각하고 하는 거 -->	
	<select id="all" resultMap="empAll">
	 select * from employees
	</select>
	
	<!-- association : 1:1 관계의 join 명령을 처리하기 위해 사용된다. -->
	<resultMap type="part03.dto.EmpDTO" id="emp_dept_result">
		<result column="employee_id" property="employee_id" />
		<result column="first_name" property="first_name" />
		<result column="job_id" property="job_id" />
		<result column="department_id" property="department_id" />
	<!-- 변수명 dept에 테이블 column에서 꺼내온 데이터를 property 값에 넣어준다. -->
		<association property="dept" javaType="part03.dto.DeptDTO">
		 <result column="department_name" property="department_name" />
		
		</association>
	</resultMap>
	
	<select id="emp_dept" resultMap="emp_dept_result">
		select e.employee_id,
		e.first_name, e.job_id,
		e.department_id, d.department_name
		from
		employees e, departments d
	<!-- where에서 뒤에가 기본키(e.department_id에 11111111122233이면 d.department_id는 1 2 3 4 5 하나씩 있음.) -->
		where e.department_id=d.department_id
	</select>
	
	<!-- collection : 1:N 관계의 join 명령을 처리하기 위해 사용된다.
		collection은 값을 배열로 받고, select에서 구하려는 column을 담을 변수를 설정.	 -->
	<resultMap type="part03.dto.DeptDTO" id="dept_emp_result">
	 <result column="department_id" property="department_id" />
	 <result column="department_name" property="department_name" />
	<!--  DeptDTO에 private ListEmpDTO> emp; 밑에랑 뭐가 어떻게 들어가는지 비교해봐 -->
	 <collection property="emp" javaType="java.util.List" ofType="part03.dto.EmpDTO">
	  <result column="employee_id" property="employee_id" />
	  <result column="first_name" property="first_name" />
	 </collection>
	</resultMap>
	
	<select id="dept_emp" resultMap="dept_emp_result">
		select d.department_id,	d.department_name, e.employee_id, e.first_name
		from departments d,	employees e
	<!-- 뒤에가 기본키 이니깐 d.department_id가 1 2 3 4 5 있으면 e.department_id 1122334455로 있으면 하나에 여러개 처리	 -->
		where d.department_id=e.department_id
		order by d.department_id
	</select>
	
	<!-- discriminator : 검색된 결과를 이용해서 다른 resultMap을 사용하도록 하는 요소
			 switch문과 비슷한 기능을 처리한다.
			 extends 속성은 다른 resultMap을 상속받아 사용한다. -->
	<resultMap type="part03.dto.EmpDTO" id="myResult" autoMapping="false">
	  <result column="employee_id" property="employee_id" />
	  <result column="first_name" property="first_name" />
	  
	  <discriminator javaType="java.lang.String" column="employee_id">
	   <!-- column의 값이 200이면 resultMap을 실행해라. 나머지 값은 null -->
	   <case value="200" resultMap="jobResult" />
	   <case value="100" resultMap="deptResult" />
	  </discriminator>
	</resultMap>
	
	<resultMap type="part03.dto.EmpDTO" id="jobResult" extends="myResult" autoMapping="false">
	  <result column="job_id" property="job_id" />
	</resultMap>
	
	<resultMap type="part03.dto.EmpDTO" id="deptResult" extends="myResult" autoMapping="false">
	  <result column="department_id" property="department_id" />
	</resultMap>
			 
	<select id="dnator" resultMap="myResult">
		select * from employees where
		 employee_id in(100,200,202)
	</select>
	
	
</mapper>    